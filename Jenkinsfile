pipeline {
    agent any
    environment {
        DOCKER_REPO = "ghcr.io/animal-squad/project-s-fe"
        GIT_BRANCH = "${env.BRANCH_NAME}"
        DEPLOYMENT_NAMESPACE = "${params.DEPLOYMENT_NAMESPACE}"
        DEPLOYMENT_NAME = "${params.DEPLOYMENT_NAME}"
        DEPLOYMENT_CONTAINER_NAME = "${params.DEPLOYMENT_CONTAINER_NAME}"
        KANIKO_JOB_YAML = '/var/jenkins_home/kaniko/job-kaniko-frontend.yaml' // Kaniko Pod YAML ÌååÏùº Í≤ΩÎ°ú
        KANIKO_JOB_NAME = 'kaniko-frontend' // Í∞í ÏÑ§Ï†ïÌï† Î∂ÄÎ∂Ñ
        JENKINS_NAMESPACE = 'devops' // Kaniko PodÎ•º Ïã§ÌñâÌï† ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§
    }
    parameters {
        string(name: 'DEPLOYMENT_NAMESPACE', defaultValue: 'linket', description: 'Î∞∞Ìè¨Ìï† Kubernetes ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§') // ÏÑ§Ï†ï
        string(name: 'DEPLOYMENT_NAME', defaultValue: 'frontend-deployment', description: 'Î∞∞Ìè¨Ìï† Deployment Ïù¥Î¶Ñ') // ÏÑ§Ï†ï  
        string(name: 'DEPLOYMENT_CONTAINER_NAME', defaultValue: 'frontend-container', description: 'Deployment ÎÇ¥ Ïª®ÌÖåÏù¥ÎÑà Ïù¥Î¶Ñ') // ÏÑ§Ï†ï
    }
    stages {
        stage('Checkout Source Code') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.GIT_COMMIT_MESSAGE = sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim()
                    echo "Current Git Commit Short: ${env.GIT_COMMIT_SHORT}"
                    echo "Git Commit Message: ${env.GIT_COMMIT_MESSAGE}"
                }
            }
        }
        // stage('Unit Tests') {
        //     steps {
        //         sh 'make test' // Ïú†Îãõ ÌÖåÏä§Ìä∏ Ïã§Ìñâ stage ÌòÑÏû¨ ÏóÜÏùå
        //     }
        // }
        stage('Update Kaniko YAML') {
            steps {
                script {
                    // Kaniko YAML ÌååÏùºÏóêÏÑú Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ ÏóÖÎç∞Ïù¥Ìä∏
                    sh """
                    sed -i 's|--destination=.*|--destination=${DOCKER_REPO}:${GIT_COMMIT_SHORT}",|' ${KANIKO_JOB_YAML}
                    """
                }
            }
        }
        stage('Deploy Kaniko Job') {
            steps {
                script {
                    // Í∏∞Ï°¥ Kaniko Pod ÏÇ≠Ï†ú ÌõÑ ÏÉàÎ°úÏö¥ Kaniko Pod Î∞∞Ìè¨
                    sh """
                    kubectl delete job ${KANIKO_JOB_NAME} -n ${JENKINS_NAMESPACE} --ignore-not-found
                    kubectl create -f ${KANIKO_JOB_YAML} -n ${JENKINS_NAMESPACE}
                    """
                }
            }
        }
        stage('Wait for Kaniko Build') {
            steps {
                script {
                    // Kaniko JobÍ∞Ä ÏôÑÎ£åÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
                    timeout(time: 15, unit: 'MINUTES') {
                        waitUntil {
                            def succeeded = sh(script: "kubectl get job ${KANIKO_JOB_NAME} -n ${JENKINS_NAMESPACE} -o jsonpath='{.status.succeeded}'", returnStdout: true).trim()
                            def failed = sh(script: "kubectl get job ${KANIKO_JOB_NAME} -n ${JENKINS_NAMESPACE} -o jsonpath='{.status.failed}'", returnStdout: true).trim()
                            // Îπà Î¨∏ÏûêÏó¥ Ï≤òÎ¶¨
                            def succeededCount = succeeded ? succeeded.toInteger() : 0
                            def failedCount = failed ? failed.toInteger() : 0

                            echo "Kaniko Job Succeeded: ${succeededCount}, Failed: ${failedCount}"
                            return (succeededCount >= 1) || (failedCount >= 1)
                        }
                    }
                    // ÏµúÏ¢Ö ÏÉÅÌÉú ÌôïÏù∏
                    def finalStatus = sh(script: "kubectl get job ${KANIKO_JOB_NAME} -n ${JENKINS_NAMESPACE} -o jsonpath='{.status.conditions[?(@.type==\"Complete\")].status}'", returnStdout: true).trim()
                    def finalFailed = sh(script: "kubectl get job ${KANIKO_JOB_NAME} -n ${JENKINS_NAMESPACE} -o jsonpath='{.status.conditions[?(@.type==\"Failed\")].status}'", returnStdout: true).trim()
                    if (finalStatus != 'True') {
                        error "Kaniko build failed."
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // KubernetesÏóê Ïù¥ÎØ∏ÏßÄ Î∞∞Ìè¨
                    sh """
                    kubectl set image deployment/${DEPLOYMENT_NAME} \
                    -n ${DEPLOYMENT_NAMESPACE} ${DEPLOYMENT_CONTAINER_NAME}=${DOCKER_REPO}:${GIT_COMMIT_SHORT}
                    kubectl rollout status deployment/${DEPLOYMENT_NAME} -n ${DEPLOYMENT_NAMESPACE}
                    """
                    }
                }
            }
        }
    post {
        always {
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
            }
            echo "Build Result: ${currentBuild.result}"
            withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
                discordSend title: "ÎπåÎìú Í≤∞Í≥º: ${env.JOB_NAME}",
                            description: """
                            **Ïª§Î∞ã Î©îÏãúÏßÄ**: `${env.GIT_COMMIT_MESSAGE}`
                            **Ïª§Î∞ã ID**: `${env.GIT_COMMIT_SHORT}`
                            **ÎπåÎìú Î≤àÌò∏**: `#${env.BUILD_NUMBER}`
                            **ÏÉÅÌÉú**: ${currentBuild.result == 'SUCCESS' ? 'üü¢ **ÏÑ±Í≥µ**' : '‚ùå **Ïã§Ìå®**'}
                            """,
                            webhookURL: DISCORD
            }
        }
    }
}